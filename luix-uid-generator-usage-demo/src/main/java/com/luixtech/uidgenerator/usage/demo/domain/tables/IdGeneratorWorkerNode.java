/*
 * This file is generated by jOOQ.
 */
package com.luixtech.uidgenerator.usage.demo.domain.tables;


import com.luixtech.uidgenerator.usage.demo.domain.Keys;
import com.luixtech.uidgenerator.usage.demo.domain.Luixdemo;
import com.luixtech.uidgenerator.usage.demo.domain.tables.records.IdGeneratorWorkerNodeRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Worker assigner for ID generator
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IdGeneratorWorkerNode extends TableImpl<IdGeneratorWorkerNodeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>luixdemo.id_generator_worker_node</code>
     */
    public static final IdGeneratorWorkerNode ID_GENERATOR_WORKER_NODE = new IdGeneratorWorkerNode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IdGeneratorWorkerNodeRecord> getRecordType() {
        return IdGeneratorWorkerNodeRecord.class;
    }

    /**
     * The column <code>luixdemo.id_generator_worker_node.id</code>. auto increment id
     */
    public final TableField<IdGeneratorWorkerNodeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "auto increment id");

    /**
     * The column <code>luixdemo.id_generator_worker_node.app_id</code>. application ID
     */
    public final TableField<IdGeneratorWorkerNodeRecord, String> APP_ID = createField(DSL.name("app_id"), SQLDataType.VARCHAR(64).nullable(false), this, "application ID");

    /**
     * The column <code>luixdemo.id_generator_worker_node.host_name</code>. host name
     */
    public final TableField<IdGeneratorWorkerNodeRecord, String> HOST_NAME = createField(DSL.name("host_name"), SQLDataType.VARCHAR(64).nullable(false), this, "host name");

    /**
     * The column <code>luixdemo.id_generator_worker_node.type</code>. node type: P - Physical Machine, C - Container
     */
    public final TableField<IdGeneratorWorkerNodeRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CHAR(1).nullable(false), this, "node type: P - Physical Machine, C - Container");

    /**
     * The column <code>luixdemo.id_generator_worker_node.uptime</code>. uptime
     */
    public final TableField<IdGeneratorWorkerNodeRecord, LocalDate> UPTIME = createField(DSL.name("uptime"), SQLDataType.LOCALDATE.nullable(false), this, "uptime");

    /**
     * The column <code>luixdemo.id_generator_worker_node.created_time</code>. created time
     */
    public final TableField<IdGeneratorWorkerNodeRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("created_time"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "created time");

    private IdGeneratorWorkerNode(Name alias, Table<IdGeneratorWorkerNodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private IdGeneratorWorkerNode(Name alias, Table<IdGeneratorWorkerNodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Worker assigner for ID generator"), TableOptions.table());
    }

    /**
     * Create an aliased <code>luixdemo.id_generator_worker_node</code> table reference
     */
    public IdGeneratorWorkerNode(String alias) {
        this(DSL.name(alias), ID_GENERATOR_WORKER_NODE);
    }

    /**
     * Create an aliased <code>luixdemo.id_generator_worker_node</code> table reference
     */
    public IdGeneratorWorkerNode(Name alias) {
        this(alias, ID_GENERATOR_WORKER_NODE);
    }

    /**
     * Create a <code>luixdemo.id_generator_worker_node</code> table reference
     */
    public IdGeneratorWorkerNode() {
        this(DSL.name("id_generator_worker_node"), null);
    }

    public <O extends Record> IdGeneratorWorkerNode(Table<O> child, ForeignKey<O, IdGeneratorWorkerNodeRecord> key) {
        super(child, key, ID_GENERATOR_WORKER_NODE);
    }

    @Override
    public Schema getSchema() {
        return Luixdemo.LUIXDEMO;
    }

    @Override
    public Identity<IdGeneratorWorkerNodeRecord, Long> getIdentity() {
        return (Identity<IdGeneratorWorkerNodeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<IdGeneratorWorkerNodeRecord> getPrimaryKey() {
        return Keys.KEY_ID_GENERATOR_WORKER_NODE_PRIMARY;
    }

    @Override
    public List<UniqueKey<IdGeneratorWorkerNodeRecord>> getKeys() {
        return Arrays.<UniqueKey<IdGeneratorWorkerNodeRecord>>asList(Keys.KEY_ID_GENERATOR_WORKER_NODE_PRIMARY);
    }

    @Override
    public IdGeneratorWorkerNode as(String alias) {
        return new IdGeneratorWorkerNode(DSL.name(alias), this);
    }

    @Override
    public IdGeneratorWorkerNode as(Name alias) {
        return new IdGeneratorWorkerNode(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IdGeneratorWorkerNode rename(String name) {
        return new IdGeneratorWorkerNode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IdGeneratorWorkerNode rename(Name name) {
        return new IdGeneratorWorkerNode(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, LocalDate, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
